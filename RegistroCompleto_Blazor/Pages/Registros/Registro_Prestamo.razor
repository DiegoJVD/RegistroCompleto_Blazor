@page "/Prestamos"

@inject IToastService toast

<EditForm Model="Prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            Registro de Persona
        </div>
        <div class="card-body">
            <form>
                @*Prestamo*@
                <div>
                    <label class="form-label ">Id</label>
                </div>
                <div class="input-group my-2">

                    <input class="form-control" @bind="@Prestamo.PrestamoId" />
                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                        <i class="oi oi-magnifying-glass mr-2" /> Buscar
                    </button>
                </div>

                @*Fecha*@
                <div>
                    <label class="form-label">Fecha</label>
                    <InputDate class="form-control" @bind-Value="Prestamo.Fecha" />
                </div>
                <ValidationMessage For="@(()=> Prestamo.Fecha)" />

                @*Persona*@
                <div>
                    <label class="form-label">Persona</label>
                    <InputSelect class="form-control" @bind-Value="Prestamo.PersonaId">
                        @foreach (var persona in Personas)
                        {
                        <option value="@persona.PersonaId">@persona.PersonaId - @persona.Nombres @persona.Apellidos </option>
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(()=> Prestamo.PersonaId)" />

                @*Concepto*@

                <div>
                    <label class="form-label">Concepto</label>
                    <input class="form-control" @bind="Prestamo.Concepto" />
                </div>
                <ValidationMessage For="@(()=> Prestamo.Concepto)" />

                @*Monto*@
                <div>
                    <label class="form-label">Monto</label>
                    <input class="form-control" @bind="Prestamo.Monto" />
                </div>
                <ValidationMessage For="@(()=> Prestamo.Monto)" />

                @*Balance*@
                <div>
                    <label class="form-label">Balance</label>
                    <input class="form-control" @bind="Prestamo.Balance" readonly/>
                </div>
              
                <ValidationMessage For="@(()=> Prestamo.Balance)" />


            </form>
        </div>

        <div class="card-footer">

            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                    <i class="oi oi-file mr-2" />
                    Nuevo
                </button>
                <button type="submit" class="btn btn-lg btn-success">
                    <i class="oi oi-account-login mr-2" style="transform:rotate(90deg)" />
                    Guardar
                </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <i class="oi oi-trash mr-2" />
                    Eliminar
                </button>

            </div>

        </div>

    </div>
    
</EditForm>

@code {

    public int PrestamoId { get; set; }
    private Prestamos Prestamo = new Prestamos();
    public List<Personas> Personas { get; set; }

    protected override void OnInitialized()
    {
        Prestamo.Fecha = DateTime.Now;
        Personas = PersonasBLL.GetList(p => true);
    }

    public void Nuevo()
    {
        Prestamo = new Prestamos();
    }

    private void Buscar()
    {
        var encontrado = PrestamosBLL.Buscar(Prestamo.PrestamoId);

        if (encontrado != null)
            this.Prestamo = encontrado;
        else
            toast.ShowWarning("El Préstamo no fue encontrado");
    }

    public void Guardar()
    {
        bool guardado = PrestamosBLL.Guardar(Prestamo);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Prestamo guardado correctamente");
        }
        else
            toast.ShowError("No se pudo guardar el Préstamo");
    }

    public void Eliminar()
    {
        bool eliminado = PrestamosBLL.Eliminar(Prestamo.PrestamoId);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Préstamo eliminado correctamente");
        }
        else
            toast.ShowError("No se pudo eliminar el Préstamo");
    }
}